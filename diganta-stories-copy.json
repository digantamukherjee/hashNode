{"posts":[{"_id":"5e29f7d67a1d3fcc5903844a","hasPinnedTag":false,"isRepublished":false,"draft":"5e29dbe67a1d3fcc5903835f","followersCount":1,"author":"5e1da2a87a1d3fcc59028458","cuid":"ck5r5bqme06w4qks1xad55e27","slug":"6-prototype-chain-objectcreate-and-more","title":"6. Prototype chain, Object.create() and more..","type":"story","partOfPublication":true,"publication":"5e1da3e232d5fad159b6aa37","series":"5e1eff7a32d5fad159b6c499","__v":0,"reactionsByCurrentUser":[],"totalReactions":0,"reactions":[],"similarPostIds":["5d1cafdcf42994da409b2b5b","57da8a2af72dd3705c1605fe","5c338c87a102e59d13dc3376","5dbb1ab820c89dc564f8f56c","5c75cf56efcf03d946bb5249","5c742993baaa40c04ca286db","5d1ec8e8861d967967e6e5db","589d69f8b7eaedaa4b51779e","5ce1be451295141c5de31b33","5cb60d715d6e9c583408a638","5cf7d9c48bcf6f977a1aa66e","5d95af0688bd943a358f08f0","5a38f13e52a5369334dde045","5d49e8d683ac19b965aa7957","5bde0bfa3377a8f55ffd057c","5cf699d8571ff6ae5c437ced","5d63492e3cabf0761e88c3ef","5dc2b1f382890fad24c5e8cd","58a9aa98c881b856ccbaa3b0","59cb7aebc5384f840b983cbf","5db4a254759edf547bf767bb","5d7bb81a8a9f85f13da90680","5d6be6a7f00b9e3f378d6e82","5e27724e7a1d3fcc5903497d","5e27bdab32d5fad159b774e6","5e28b74c32d5fad159b790ad","5d389db3b19a6e4f7202752f","5d1740b64f1dfa0071a21446","5e273a2c7a1d3fcc5903458e","59df7cbee8b3f8fd0de170bd"],"bookmarkedIn":[],"hasReward":false,"numCollapsed":0,"duplicatePosts":[],"isDelisted":false,"inviters":[],"answeredByTarget":false,"contributors":[],"isEngaging":false,"isFeatured":false,"isActive":true,"followers":[],"replyCount":0,"responseCount":0,"questionReplies":[],"responses":[],"popularity":3795.5006,"downvotedBy":[],"upvotedBy":[],"dateAdded":"2020-01-23T19:45:26.071Z","untaggedFrom":[],"tags":["56744722958ef13879b9511f","56744721958ef13879b94cad","5e28b74c32d5fad159b790ae","5e29f7d67a1d3fcc5903844b"],"downvotes":0,"upvotes":0,"totalPollVotes":0,"reward":{"type":"xlm"},"pollOptions":[],"hasPolls":false,"contentMarkdown":"In my  [last ](https://diganta.hashnode.dev/5-prototype-based-inheritance-in-javascript-ck5psgyjw06bdqps1wl6rsdnf) post we drilled down the prototype chain until we reached  [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) and finally hit the `null`. Now let's reverse our journey and say we have an object which has 2 levels of inheritance above it. So what happens when we try to access it's parent's or grandparent's properties? How do we know whether any property mentioned belongs to the object or it parent or grandparent?\nLet's see some code:\n\n```\nfunction MyPseudoGrandParentClass(myProperty){\n}\n\nfunction MyPseudoParentClass(myProperty){\n}\n\nfunction MyPseudoChildClass(myProperty){\n}\n\n//create the prototype chain or inheritance\nMyPseudoChildClass.prototype.__proto__ = MyPseudoParentClass.prototype;\nMyPseudoParentClass.prototype.__proto__ = MyPseudoGrandParentClass.prototype;\n\n\n//Let's add some property to the grand parent and parent \nMyPseudoGrandParentClass.prototype.sayHelloGP = function(){\n\tconsole.log(\"Hello Grandpa and Grandma!\");\n}\nMyPseudoParentClass.prototype.sayHelloP = function(){\n\tconsole.log(\"Hello Mom and Dad!\");\n}\n\nvar myPseudoChildClassObject = new MyPseudoChildClass();\n\n//Can child access the properties of parent and grand parent?\nmyPseudoChildClassObject.sayHelloGP();//Output Hello Grandpa and Grandma!\nmyPseudoChildClassObject.sayHelloP();//Output Hello Mom and Dad!\n``` \nWhat JavaScript does here is it traverses the prototype chain until it finds the *callable *properties sayHelloGP and sayHelloP and then executes them.\nIn case it fails to find them, it results in `TypeError`.\n\nWhat do you think will happen if I add sayHelloP as a property on the child class itself.\n\n```\nfunction MyPseudoGrandParentClass(myProperty){\n}\n\nfunction MyPseudoParentClass(myProperty){\n}\n\nfunction MyPseudoChildClass(myProperty){\n\tthis.sayHelloP = function(){\n\t\tconsole.log(\"Not calling parent!\");\n\t}\n}\n\n//create the prototype chain or inheritance\nMyPseudoChildClass.prototype.__proto__ = MyPseudoParentClass.prototype;\nMyPseudoParentClass.prototype.__proto__ = MyPseudoGrandParentClass.prototype;\n\n\n//Let's add some property to the grand parent and parent \nMyPseudoGrandParentClass.prototype.sayHelloGP = function(){\n\tconsole.log(\"Hello Grandpa and Grandma!\");\n}\nMyPseudoParentClass.prototype.sayHelloP = function(){\n\tconsole.log(\"Hello Mom and Dad!\");\n}\n\nvar myPseudoChildClassObject = new MyPseudoChildClass();\n\n//Can child access the properties of parent and grand parent?\nmyPseudoChildClassObject.sayHelloGP();//Output Hello Grandpa and Grandma!\nmyPseudoChildClassObject.sayHelloP();//Output Not calling parent!\n``` \nObviously preference will be given to the child class property. This is the result of something called **Scope** which we will discuss in detail later. So in this situation if we specifically want to call the parent's method how to do so? We can do that by accessing the prototype chain until we reach the parent and then call the method on that:\n\n```\nmyPseudoChildClassObject.__proto__.sayHelloP();//Output Hello Mom and Dad!\n``` \n\n\nNow how do we figure out if we are able to access any property on the child class, whether it belongs to the child class or is it an inherited property of it's parent chain? `Object.prototype.hasOwnProperty` is a method on the Object class that helps us to figure that out.\n\n```\nif(myPseudoChildClassObject.hasOwnProperty(\"sayHelloGP\")){\n\tmyPseudoChildClassObject.sayHelloGP();\n}else{\n\tconsole.log(\"property not found on object\");//Output property not found on object\n}\n``` \nNow that we have the basic understanding of traversing the chain both ways, let's move on to the last method of object creation i.e. `Object.create()`\n\n### Object.create()\nSyntax: `Object.create ( O [, Properties] )`\nHow does this work?  [EcmaScript ](https://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.5) specifies the following algorithm for this method:\n1. If type of `O` is null or not object then throw `TypeError` exception\n2. Create an object(`obj`) as if created using the `new` keyword on the built-in `Object` function constructor. (`var obj = new Object();`)\n3. Set the [[prototype]] internal property of `obj` to `O`. (`obj.__proto__ = O`)\n4. If the optional arguments `[, Properties]` is not undefined then add own properties to `obj` as if by calling the built-in property of `Object`  `Object.defineProperties` with arguments `obj` and `Properties`.\n5. Return `obj`\n\nSo now we have seen all the various ways in which an object in JavaScript can be created.\n\nAn important observation to make here is that creating a **private or closed scope** is possible by using the constructor function method of object creation using the `new` keyword, but is somewhat difficult with literal notation or `Object.create()`.\nA private or closed scope can be created defining properties on the constructor function using the `var` keyword instead of the `this` keyword.\n\n```\nfunction ObjMain(){\n\tvar internal = \"intternalVar\";\n\tthis.publicVar = \"publicVar\";\n\tthis.revealInternal = function(){\n\t\treturn internal;\n\t}\n\t\n}\n\nvar newObj = new ObjMain();\nconsole.log(newObj);//Output ObjMain { publicVar: 'publicVar', revealInternal: [Function] }\nconsole.log(newObj.internal);//Output undefined\nconsole.log(newObj.publicVar);//Output publicVar\nconsole.log(newObj.revealInternal());//Output intternalVar\n``` \nIf we look at the new object created the property `internal` is missing. `publicVar ` is present. We can define a function named `revealInternal ` which is similar to what we call a *getter* method in Classical inheritance terminology to reveal the value that is part of the *private or closed scope* of the function constructor. If you have heard the term **Closure** in the context of JavaScript, what we saw just now was, well  **Closure** in action. But we shall deal with the intricacies of **Scope** and **Closure** in later posts.\n\nIn our next post we will define the basic datatypes available in JavaScript.\n\n\n**References**\n\n [http://ecma-international.org/ecma-262/5.1/#sec-15.2.3.5](http://ecma-international.org/ecma-262/5.1/#sec-15.2.3.5) ","content":"<p>In my  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/5-prototype-based-inheritance-in-javascript-ck5psgyjw06bdqps1wl6rsdnf\">last </a> post we drilled down the prototype chain until we reached  <a target='_blank' rel='noopener noreferrer'  href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a> and finally hit the <code>null</code>. Now let&#39;s reverse our journey and say we have an object which has 2 levels of inheritance above it. So what happens when we try to access it&#39;s parent&#39;s or grandparent&#39;s properties? How do we know whether any property mentioned belongs to the object or it parent or grandparent?\nLet&#39;s see some code:</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoGrandParentClass</span>(<span class=\"hljs-params\">myProperty</span>)</span>{\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoParentClass</span>(<span class=\"hljs-params\">myProperty</span>)</span>{\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoChildClass</span>(<span class=\"hljs-params\">myProperty</span>)</span>{\n}\n\n<span class=\"hljs-comment\">//create the prototype chain or inheritance</span>\nMyPseudoChildClass.prototype.__proto__ = MyPseudoParentClass.prototype;\nMyPseudoParentClass.prototype.__proto__ = MyPseudoGrandParentClass.prototype;\n\n\n<span class=\"hljs-comment\">//Let's add some property to the grand parent and parent </span>\nMyPseudoGrandParentClass.prototype.sayHelloGP = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello Grandpa and Grandma!\"</span>);\n}\nMyPseudoParentClass.prototype.sayHelloP = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello Mom and Dad!\"</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myPseudoChildClassObject = <span class=\"hljs-keyword\">new</span> MyPseudoChildClass();\n\n<span class=\"hljs-comment\">//Can child access the properties of parent and grand parent?</span>\nmyPseudoChildClassObject.sayHelloGP();<span class=\"hljs-comment\">//Output Hello Grandpa and Grandma!</span>\nmyPseudoChildClassObject.sayHelloP();<span class=\"hljs-comment\">//Output Hello Mom and Dad!</span>\n</code></pre><p>What JavaScript does here is it traverses the prototype chain until it finds the <em>callable </em>properties sayHelloGP and sayHelloP and then executes them.\nIn case it fails to find them, it results in <code>TypeError</code>.</p>\n<p>What do you think will happen if I add sayHelloP as a property on the child class itself.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoGrandParentClass</span>(<span class=\"hljs-params\">myProperty</span>)</span>{\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoParentClass</span>(<span class=\"hljs-params\">myProperty</span>)</span>{\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoChildClass</span>(<span class=\"hljs-params\">myProperty</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.sayHelloP = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Not calling parent!\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">//create the prototype chain or inheritance</span>\nMyPseudoChildClass.prototype.__proto__ = MyPseudoParentClass.prototype;\nMyPseudoParentClass.prototype.__proto__ = MyPseudoGrandParentClass.prototype;\n\n\n<span class=\"hljs-comment\">//Let's add some property to the grand parent and parent </span>\nMyPseudoGrandParentClass.prototype.sayHelloGP = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello Grandpa and Grandma!\"</span>);\n}\nMyPseudoParentClass.prototype.sayHelloP = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello Mom and Dad!\"</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myPseudoChildClassObject = <span class=\"hljs-keyword\">new</span> MyPseudoChildClass();\n\n<span class=\"hljs-comment\">//Can child access the properties of parent and grand parent?</span>\nmyPseudoChildClassObject.sayHelloGP();<span class=\"hljs-comment\">//Output Hello Grandpa and Grandma!</span>\nmyPseudoChildClassObject.sayHelloP();<span class=\"hljs-comment\">//Output Not calling parent!</span>\n</code></pre><p>Obviously preference will be given to the child class property. This is the result of something called <strong>Scope</strong> which we will discuss in detail later. So in this situation if we specifically want to call the parent&#39;s method how to do so? We can do that by accessing the prototype chain until we reach the parent and then call the method on that:</p>\n<pre><code>myPseudoChildClassObject.__proto_<span class=\"hljs-number\">_</span>.sayHelloP();<span class=\"hljs-regexp\">//</span>Output Hello Mom <span class=\"hljs-keyword\">and</span> Dad!\n</code></pre><p>Now how do we figure out if we are able to access any property on the child class, whether it belongs to the child class or is it an inherited property of it&#39;s parent chain? <code>Object.prototype.hasOwnProperty</code> is a method on the Object class that helps us to figure that out.</p>\n<pre><code><span class=\"hljs-keyword\">if</span>(myPseudoChildClassObject.hasOwnProperty(<span class=\"hljs-string\">\"sayHelloGP\"</span>)){\n    myPseudoChildClassObject.sayHelloGP();\n}<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"property not found on object\"</span>);<span class=\"hljs-regexp\">//</span>Output property <span class=\"hljs-keyword\">not</span> found <span class=\"hljs-literal\">on</span> object\n}\n</code></pre><p>Now that we have the basic understanding of traversing the chain both ways, let&#39;s move on to the last method of object creation i.e. <code>Object.create()</code></p>\n<h3 id=\"object-create-\">Object.create()</h3>\n<p>Syntax: <code>Object.create ( O [, Properties] )</code>\nHow does this work?  <a target='_blank' rel='noopener noreferrer'  href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.5\">EcmaScript </a> specifies the following algorithm for this method:</p>\n<ol>\n<li>If type of <code>O</code> is null or not object then throw <code>TypeError</code> exception</li>\n<li>Create an object(<code>obj</code>) as if created using the <code>new</code> keyword on the built-in <code>Object</code> function constructor. (<code>var obj = new Object();</code>)</li>\n<li>Set the [[prototype]] internal property of <code>obj</code> to <code>O</code>. (<code>obj.__proto__ = O</code>)</li>\n<li>If the optional arguments <code>[, Properties]</code> is not undefined then add own properties to <code>obj</code> as if by calling the built-in property of <code>Object</code>  <code>Object.defineProperties</code> with arguments <code>obj</code> and <code>Properties</code>.</li>\n<li>Return <code>obj</code></li>\n</ol>\n<p>So now we have seen all the various ways in which an object in JavaScript can be created.</p>\n<p>An important observation to make here is that creating a <strong>private or closed scope</strong> is possible by using the constructor function method of object creation using the <code>new</code> keyword, but is somewhat difficult with literal notation or <code>Object.create()</code>.\nA private or closed scope can be created defining properties on the constructor function using the <code>var</code> keyword instead of the <code>this</code> keyword.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ObjMain</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> internal = <span class=\"hljs-string\">\"intternalVar\"</span>;\n    <span class=\"hljs-keyword\">this</span>.publicVar = <span class=\"hljs-string\">\"publicVar\"</span>;\n    <span class=\"hljs-keyword\">this</span>.revealInternal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">return</span> internal;\n    }\n\n}\n\n<span class=\"hljs-keyword\">var</span> newObj = <span class=\"hljs-keyword\">new</span> ObjMain();\n<span class=\"hljs-built_in\">console</span>.log(newObj);<span class=\"hljs-comment\">//Output ObjMain { publicVar: 'publicVar', revealInternal: [Function] }</span>\n<span class=\"hljs-built_in\">console</span>.log(newObj.internal);<span class=\"hljs-comment\">//Output undefined</span>\n<span class=\"hljs-built_in\">console</span>.log(newObj.publicVar);<span class=\"hljs-comment\">//Output publicVar</span>\n<span class=\"hljs-built_in\">console</span>.log(newObj.revealInternal());<span class=\"hljs-comment\">//Output intternalVar</span>\n</code></pre><p>If we look at the new object created the property <code>internal</code> is missing. <code>publicVar</code> is present. We can define a function named <code>revealInternal</code> which is similar to what we call a <em>getter</em> method in Classical inheritance terminology to reveal the value that is part of the <em>private or closed scope</em> of the function constructor. If you have heard the term <strong>Closure</strong> in the context of JavaScript, what we saw just now was, well  <strong>Closure</strong> in action. But we shall deal with the intricacies of <strong>Scope</strong> and <strong>Closure</strong> in later posts.</p>\n<p>In our next post we will define the basic datatypes available in JavaScript.</p>\n<p><strong>References</strong></p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.2.3.5\">http://ecma-international.org/ecma-262/5.1/#sec-15.2.3.5</a> </p>\n","brief":"In my  last  post we drilled down the prototype chain until we reached  Object and finally hit the null. Now let's reverse our journey and say we have an object which has 2 levels of inheritance above it. So what happens when we try to access it's pa...","coverImage":"","views":23,"isAnonymous":false,"reactionToCountMapUnique":{"any":1},"uniqueReactions":[],"id":"5e29f7d67a1d3fcc5903844a"},{"_id":"5e28b74c32d5fad159b790ad","hasPinnedTag":false,"isRepublished":false,"draft":"5e28796d32d5fad159b78937","followersCount":1,"author":"5e1da2a87a1d3fcc59028458","cuid":"ck5psgyjw06bdqps1wl6rsdnf","slug":"5-prototype-based-inheritance-in-javascript","title":"5. Prototype based inheritance in JavaScript","type":"story","partOfPublication":true,"publication":"5e1da3e232d5fad159b6aa37","series":"5e1eff7a32d5fad159b6c499","__v":0,"dateUpdated":"2020-01-23T19:46:36.574Z","pendingPublicationApproval":false,"reactionsByCurrentUser":[],"totalReactions":0,"reactions":[],"similarPostIds":["5815ebaa7f6eb9ba32d23c6f","5df68131066598ab2752b53d","5dbb1ab820c89dc564f8f56c","5d2879a5531dd9964db88124","5dc68d9811d453b858d9cb50","5db736517d5f5493565f23ca","5cb4922c27be59cf794e6e8e","5dda4e886c0aefa8683deb1f","57f36069750740a45d8164d8","5cf303bc994bbf330a1f83cf","572262c8086ff7f652b9ebd6","5a38f13e52a5369334dde045","5d49e8d683ac19b965aa7957","58a96b39c881b856ccbaa343","57e9867828f98be5393f9f37","5b4c252dae0167e701c78ba4","5d02400736a0034c13ed018c","59d54d138109ada408d1ee68","59472f62a7bdcba46744fed8","5dfa9dabacdafdac270db678","5ce4595866930f0138affb03","5907535e171101141c48c326","5e20840d7a1d3fcc5902bf00","5c09a54a2a14f97d37b71280","5d7bb81a8a9f85f13da90680","5e24aa5532d5fad159b7486a","5e27724e7a1d3fcc5903497d","5d3b59269bd1893f026db897","5d7dd00a10361dc656459059","5df82461066598ab2752bd86"],"bookmarkedIn":[],"hasReward":false,"numCollapsed":0,"duplicatePosts":[],"isDelisted":false,"inviters":[],"answeredByTarget":false,"contributors":[],"isEngaging":false,"isFeatured":false,"isActive":true,"followers":[],"replyCount":0,"responseCount":0,"questionReplies":[],"responses":[],"popularity":3793.6771,"downvotedBy":[],"upvotedBy":[],"dateAdded":"2020-01-22T20:57:48.450Z","untaggedFrom":[],"tags":["56744722958ef13879b9511f","56744721958ef13879b94cad","5e28b74c32d5fad159b790b0","5e28b74c32d5fad159b790af","5e28b74c32d5fad159b790ae"],"downvotes":0,"upvotes":0,"totalPollVotes":0,"reward":{"type":"xlm"},"pollOptions":[],"hasPolls":false,"contentMarkdown":"As we have seen in our  [last post](https://diganta.hashnode.dev/4-prototype-__proto__-and-inheritance-in-javascript-ck5oexqoh05fwqks1yae12w6t) the association of `prototype` and `__proto__` objects creates the interesting phenomenon of *prototype based inheritance* in JavaScript. EcmaScript has specified some rules for controlling the behavior of `[[prototype]]` object.They are:\n\n- All objects have an internal property called `[[prototype]]` whose value is either `null` or an object and it will be used for implementing inheritance.\n\n- Every **prototype chain** must have a finite length, i.e. if we recursively start accessing the `[[prototype]]` object of an object, this internal property must eventually terminate at `null`.\n\nSo how does the inheritance look like? Let's visualize it:\nFor this let us take the stages of human evolution as our inheritance chain: \n\n**Australopithecus afarensis->Homo habilis->Homo erectus->Homo neanderthalensis->Homo sapiens**\n\nThe inheritance would look something like this:\n\n![prototype_chain_inheritance.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1579722214146/3cXqLtaP7.png)\n\nSo here:\n\n- All constructor function’s `__proto__` property points to the `prototype` property of the JavaScript `Function` constructor function\n\n- All constructor function’s `prototype` property points to an object\n\n- The `constructor` property of the `prototype` object of a constructor function points to the constructor function itself\n\n- The `__proto__` property of the `prototype` object of a constructor function points either to it’s parent constructor function’s `prototype` property or to `prototype` property of the JavaScript `Object` constructor function. And this is the mechanism used in JavaScript to inherit methods of its parent objects.\nUltimately the `__proto__` property of the `Object` constructor function points to `null`\n\nSo why is this mechanism so powerful? Let's see some code\nWe define a constructor function and create 2 object using it\n\n```\nfunction MyPseudoClass(welcomeString){\n    this.welcomeString = welcomeString;\n}\n\nvar myPseudoClassObject1 = new MyPseudoClass(\"My precious\");\nvar myPseudoClassObject2 = new MyPseudoClass(\"gollum gollum!\");\nconsole.log(myPseudoClassObject1);//Output MyPseudoClass { welcomeString: 'My precious' }\nconsole.log(myPseudoClassObject2);//Output MyPseudoClass { welcomeString: 'gollum gollum!' }\n``` \nSo each of the objects created contains it's own copy of the property `welcomeString `. Let us assume we want the objects of `MyPseudoClass` to have the ability to print the `welcomeString` property. One way of doing it is adding a method to `MyPseudoClass`. Let's see how the objects would look then.\n\n```\nfunction MyPseudoClass(welcomeString){\n    this.welcomeString = welcomeString;\n\tthis.printWelcomeString = function(){\n\t\tconsole.log(this.welcomeString);\n\t};\n}\n\nvar myPseudoClassObject1 = new MyPseudoClass(\"My precious\");\nvar myPseudoClassObject2 = new MyPseudoClass(\"gollum gollum!\");\nmyPseudoClassObject1.printWelcomeString();// Output My precious\nmyPseudoClassObject2.printWelcomeString();//Output gollum gollum!\nconsole.log(myPseudoClassObject1);//Output MyPseudoClass { welcomeString: 'My precious', printWelcomeString: [Function] }\nconsole.log(myPseudoClassObject2);//Output MyPseudoClass { welcomeString: 'gollum gollum!', printWelcomeString: [Function] }\n``` \nSo each object has its own copy of `printWelcomeString` method. In real life scenarios this will cause repetition of the method in all the object instances even though it's definition is the same for all the objects unlike the `welcomeString ` property which varies for each object. So this will lead to high memory consumption. Also any object inheriting from(i.e. pointing to the `prototype` property of the `MyPseudoClass` constructor function will not have access to the `printWelcomeString` method. How to avoid this? Simply move the `printWelcomeString` property from the constructor function to it's `prototype` object. Now we see the objects created don't have the method in them but still can access it as it's available to them in their prototype chain(i.e.  `myPseudoClassObject1.__proto__.printWelcomeString()`)\n\n```\nfunction MyPseudoClass(welcomeString){\n    this.welcomeString = welcomeString;\n}\nvar myPseudoClassObject1 = new MyPseudoClass(\"My precious\");\nvar myPseudoClassObject2 = new MyPseudoClass(\"gollum gollum!\");\nMyPseudoClass.prototype.printWelcomeString = function(){\n\t\tconsole.log(this.welcomeString);\n\t};\nmyPseudoClassObject1.printWelcomeString();// Output My precious\nmyPseudoClassObject2.printWelcomeString();//Output gollum gollum!\nconsole.log(myPseudoClassObject1);//Output MyPseudoClass { welcomeString: 'My precious'} \nconsole.log(myPseudoClassObject2);//Output MyPseudoClass { welcomeString: 'gollum gollum!' }\nconsole.log(MyPseudoClass.prototype)//Output MyPseudoClass { printWelcomeString: [Function] }\n``` \nNow let's create a child class and make it inherit the `MyPseudoClass`.\n\n```\nfunction MyPseudoClass(welcomeString){\n    this.welcomeString = welcomeString;\n}\nconsole.log(MyPseudoClass.prototype); //Output MyPseudoClass {}\nfunction MyPseudoChildClass(hobbitName){\n\tthis.hobbitName = hobbitName;\n}\nMyPseudoChildClass.prototype.__proto__ = MyPseudoClass.prototype;\nconsole.log(MyPseudoChildClass.prototype); //Output MyPseudoChildClass {}\nconsole.log(MyPseudoChildClass.prototype.__proto__); //Output MyPseudoClass { printWelcomeString: [Function] }\n\nvar myPseudoChildClassObject = new MyPseudoChildClass(\"Frodo\");\nconsole.log(myPseudoChildClassObject) //Output MyPseudoChildClass { hobbitName: 'Frodo' }\nconsole.log(myPseudoChildClassObject.__proto__) //Output MyPseudoChildClass {}\nconsole.log(myPseudoChildClassObject.__proto__.__proto__)// Output MyPseudoClass { printWelcomeString: [Function] }\nconsole.log(myPseudoChildClassObject.__proto__.__proto__.__proto__) // Output {}\nconsole.log(myPseudoChildClassObject.__proto__.__proto__.__proto__.__proto__) //Output null\n``` \nSo, this proves what we just understood about the JavaScript prototype chain:\n\n- `MyPseudoChildClass.prototype.__proto__ = MyPseudoClass.prototype;` This is where the actual inheritance happens and a link is added the existing prototype chain of **Object->MyPseudoClass**.\n\n\n- `myPseudoChildClassObject.__proto__` points to the `prototype` property of `MyPseudoChildClass`.   `myPseudoChildClassObject.__proto__ === MyPseudoChildClass.prototype` is true\n\n- `myPseudoChildClassObject.__proto__.__proto__` points to `portotype` property of `MyPseudoClass `. myPseudoChildClassObject.__proto__.__proto__ === MyPseudoClass.prototype` is true.\n\n- `myPseudoChildClassObject.__proto__.__proto__.__proto__` points to the `prototype` property of `Object` constructor function. `myPseudoChildClassObject.__proto__.__proto__.__proto__ === Object.prototype` is true\n\n- `myPseudoChildClassObject.__proto__.__proto__.__proto__ === Object.prototype` points to the `__proto__` property of prototype of the `Object` constructor function which is always `null`. `myPseudoChildClassObject.__proto__.__proto__.__proto__.__proto__===Object.prototype.__proto__` is true.\n\nSo this sums up the basics of how **prototype based inheritance** is achieved in JavaScript.\n\nIn the  [next post ](https://diganta.hashnode.dev/6-prototype-chain-objectcreate-and-more-ck5r5bqme06w4qks1xad55e27) we will learn about accessing the prototype chain, the remaining method of object creation `Object.create` and then compare the important difference between the various methods of object creation.\n\n### References\n\n [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes) \n [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#Using_prototypes_in_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#Using_prototypes_in_JavaScript) \n [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) \n","content":"<p>As we have seen in our  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/4-prototype-__proto__-and-inheritance-in-javascript-ck5oexqoh05fwqks1yae12w6t\">last post</a> the association of <code>prototype</code> and <code>__proto__</code> objects creates the interesting phenomenon of <em>prototype based inheritance</em> in JavaScript. EcmaScript has specified some rules for controlling the behavior of <code>[[prototype]]</code> object.They are:</p>\n<ul>\n<li><p>All objects have an internal property called <code>[[prototype]]</code> whose value is either <code>null</code> or an object and it will be used for implementing inheritance.</p>\n</li>\n<li><p>Every <strong>prototype chain</strong> must have a finite length, i.e. if we recursively start accessing the <code>[[prototype]]</code> object of an object, this internal property must eventually terminate at <code>null</code>.</p>\n</li>\n</ul>\n<p>So how does the inheritance look like? Let&#39;s visualize it:\nFor this let us take the stages of human evolution as our inheritance chain: </p>\n<p><strong>Australopithecus afarensis-&gt;Homo habilis-&gt;Homo erectus-&gt;Homo neanderthalensis-&gt;Homo sapiens</strong></p>\n<p>The inheritance would look something like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1579722214146/3cXqLtaP7.png\" alt=\"prototype_chain_inheritance.PNG\"></p>\n<p>So here:</p>\n<ul>\n<li><p>All constructor function’s <code>__proto__</code> property points to the <code>prototype</code> property of the JavaScript <code>Function</code> constructor function</p>\n</li>\n<li><p>All constructor function’s <code>prototype</code> property points to an object</p>\n</li>\n<li><p>The <code>constructor</code> property of the <code>prototype</code> object of a constructor function points to the constructor function itself</p>\n</li>\n<li><p>The <code>__proto__</code> property of the <code>prototype</code> object of a constructor function points either to it’s parent constructor function’s <code>prototype</code> property or to <code>prototype</code> property of the JavaScript <code>Object</code> constructor function. And this is the mechanism used in JavaScript to inherit methods of its parent objects.\nUltimately the <code>__proto__</code> property of the <code>Object</code> constructor function points to <code>null</code></p>\n</li>\n</ul>\n<p>So why is this mechanism so powerful? Let&#39;s see some code\nWe define a constructor function and create 2 object using it</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoClass</span>(<span class=\"hljs-params\">welcomeString</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.welcomeString = welcomeString;\n}\n\n<span class=\"hljs-keyword\">var</span> myPseudoClassObject1 = <span class=\"hljs-keyword\">new</span> MyPseudoClass(<span class=\"hljs-string\">\"My precious\"</span>);\n<span class=\"hljs-keyword\">var</span> myPseudoClassObject2 = <span class=\"hljs-keyword\">new</span> MyPseudoClass(<span class=\"hljs-string\">\"gollum gollum!\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject1);<span class=\"hljs-comment\">//Output MyPseudoClass { welcomeString: 'My precious' }</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject2);<span class=\"hljs-comment\">//Output MyPseudoClass { welcomeString: 'gollum gollum!' }</span>\n</code></pre><p>So each of the objects created contains it&#39;s own copy of the property <code>welcomeString</code>. Let us assume we want the objects of <code>MyPseudoClass</code> to have the ability to print the <code>welcomeString</code> property. One way of doing it is adding a method to <code>MyPseudoClass</code>. Let&#39;s see how the objects would look then.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoClass</span>(<span class=\"hljs-params\">welcomeString</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.welcomeString = welcomeString;\n    <span class=\"hljs-keyword\">this</span>.printWelcomeString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.welcomeString);\n    };\n}\n\n<span class=\"hljs-keyword\">var</span> myPseudoClassObject1 = <span class=\"hljs-keyword\">new</span> MyPseudoClass(<span class=\"hljs-string\">\"My precious\"</span>);\n<span class=\"hljs-keyword\">var</span> myPseudoClassObject2 = <span class=\"hljs-keyword\">new</span> MyPseudoClass(<span class=\"hljs-string\">\"gollum gollum!\"</span>);\nmyPseudoClassObject1.printWelcomeString();<span class=\"hljs-comment\">// Output My precious</span>\nmyPseudoClassObject2.printWelcomeString();<span class=\"hljs-comment\">//Output gollum gollum!</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject1);<span class=\"hljs-comment\">//Output MyPseudoClass { welcomeString: 'My precious', printWelcomeString: [Function] }</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject2);<span class=\"hljs-comment\">//Output MyPseudoClass { welcomeString: 'gollum gollum!', printWelcomeString: [Function] }</span>\n</code></pre><p>So each object has its own copy of <code>printWelcomeString</code> method. In real life scenarios this will cause repetition of the method in all the object instances even though it&#39;s definition is the same for all the objects unlike the <code>welcomeString</code> property which varies for each object. So this will lead to high memory consumption. Also any object inheriting from(i.e. pointing to the <code>prototype</code> property of the <code>MyPseudoClass</code> constructor function will not have access to the <code>printWelcomeString</code> method. How to avoid this? Simply move the <code>printWelcomeString</code> property from the constructor function to it&#39;s <code>prototype</code> object. Now we see the objects created don&#39;t have the method in them but still can access it as it&#39;s available to them in their prototype chain(i.e.  <code>myPseudoClassObject1.__proto__.printWelcomeString()</code>)</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoClass</span>(<span class=\"hljs-params\">welcomeString</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.welcomeString = welcomeString;\n}\n<span class=\"hljs-keyword\">var</span> myPseudoClassObject1 = <span class=\"hljs-keyword\">new</span> MyPseudoClass(<span class=\"hljs-string\">\"My precious\"</span>);\n<span class=\"hljs-keyword\">var</span> myPseudoClassObject2 = <span class=\"hljs-keyword\">new</span> MyPseudoClass(<span class=\"hljs-string\">\"gollum gollum!\"</span>);\nMyPseudoClass.prototype.printWelcomeString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.welcomeString);\n    };\nmyPseudoClassObject1.printWelcomeString();<span class=\"hljs-comment\">// Output My precious</span>\nmyPseudoClassObject2.printWelcomeString();<span class=\"hljs-comment\">//Output gollum gollum!</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject1);<span class=\"hljs-comment\">//Output MyPseudoClass { welcomeString: 'My precious'} </span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject2);<span class=\"hljs-comment\">//Output MyPseudoClass { welcomeString: 'gollum gollum!' }</span>\n<span class=\"hljs-built_in\">console</span>.log(MyPseudoClass.prototype)<span class=\"hljs-comment\">//Output MyPseudoClass { printWelcomeString: [Function] }</span>\n</code></pre><p>Now let&#39;s create a child class and make it inherit the <code>MyPseudoClass</code>.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoClass</span>(<span class=\"hljs-params\">welcomeString</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.welcomeString = welcomeString;\n}\n<span class=\"hljs-built_in\">console</span>.log(MyPseudoClass.prototype); <span class=\"hljs-comment\">//Output MyPseudoClass {}</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoChildClass</span>(<span class=\"hljs-params\">hobbitName</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.hobbitName = hobbitName;\n}\nMyPseudoChildClass.prototype.__proto__ = MyPseudoClass.prototype;\n<span class=\"hljs-built_in\">console</span>.log(MyPseudoChildClass.prototype); <span class=\"hljs-comment\">//Output MyPseudoChildClass {}</span>\n<span class=\"hljs-built_in\">console</span>.log(MyPseudoChildClass.prototype.__proto__); <span class=\"hljs-comment\">//Output MyPseudoClass { printWelcomeString: [Function] }</span>\n\n<span class=\"hljs-keyword\">var</span> myPseudoChildClassObject = <span class=\"hljs-keyword\">new</span> MyPseudoChildClass(<span class=\"hljs-string\">\"Frodo\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(myPseudoChildClassObject) <span class=\"hljs-comment\">//Output MyPseudoChildClass { hobbitName: 'Frodo' }</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoChildClassObject.__proto__) <span class=\"hljs-comment\">//Output MyPseudoChildClass {}</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoChildClassObject.__proto__.__proto__)<span class=\"hljs-comment\">// Output MyPseudoClass { printWelcomeString: [Function] }</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoChildClassObject.__proto__.__proto__.__proto__) <span class=\"hljs-comment\">// Output {}</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoChildClassObject.__proto__.__proto__.__proto__.__proto__) <span class=\"hljs-comment\">//Output null</span>\n</code></pre><p>So, this proves what we just understood about the JavaScript prototype chain:</p>\n<ul>\n<li><code>MyPseudoChildClass.prototype.__proto__ = MyPseudoClass.prototype;</code> This is where the actual inheritance happens and a link is added the existing prototype chain of <strong>Object-&gt;MyPseudoClass</strong>.</li>\n</ul>\n<ul>\n<li><p><code>myPseudoChildClassObject.__proto__</code> points to the <code>prototype</code> property of <code>MyPseudoChildClass</code>.   <code>myPseudoChildClassObject.__proto__ === MyPseudoChildClass.prototype</code> is true</p>\n</li>\n<li><p><code>myPseudoChildClassObject.__proto__.__proto__</code> points to <code>portotype</code> property of <code>MyPseudoClass</code>. myPseudoChildClassObject.<strong>proto</strong>.<strong>proto</strong> === MyPseudoClass.prototype` is true.</p>\n</li>\n<li><p><code>myPseudoChildClassObject.__proto__.__proto__.__proto__</code> points to the <code>prototype</code> property of <code>Object</code> constructor function. <code>myPseudoChildClassObject.__proto__.__proto__.__proto__ === Object.prototype</code> is true</p>\n</li>\n<li><p><code>myPseudoChildClassObject.__proto__.__proto__.__proto__ === Object.prototype</code> points to the <code>__proto__</code> property of prototype of the <code>Object</code> constructor function which is always <code>null</code>. <code>myPseudoChildClassObject.__proto__.__proto__.__proto__.__proto__===Object.prototype.__proto__</code> is true.</p>\n</li>\n</ul>\n<p>So this sums up the basics of how <strong>prototype based inheritance</strong> is achieved in JavaScript.</p>\n<p>In the  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/6-prototype-chain-objectcreate-and-more-ck5r5bqme06w4qks1xad55e27\">next post </a> we will learn about accessing the prototype chain, the remaining method of object creation <code>Object.create</code> and then compare the important difference between the various methods of object creation.</p>\n<h3 id=\"references\">References</h3>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes</a> \n <a target='_blank' rel='noopener noreferrer'  href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#Using_prototypes_in_JavaScript\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#Using_prototypes_in_JavaScript</a> \n <a target='_blank' rel='noopener noreferrer'  href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function</a> </p>\n","brief":"As we have seen in our  last post the association of prototype and __proto__ objects creates the interesting phenomenon of prototype based inheritance in JavaScript. EcmaScript has specified some rules for controlling the behavior of [[prototype]] ob...","coverImage":"","views":36,"isAnonymous":false,"reactionToCountMapUnique":{"any":1},"uniqueReactions":[],"id":"5e28b74c32d5fad159b790ad"},{"_id":"5e27724e7a1d3fcc5903497d","hasPinnedTag":false,"isRepublished":false,"draft":"5e273b1d7a1d3fcc59034593","followersCount":1,"author":"5e1da2a87a1d3fcc59028458","cuid":"ck5oexqoh05fwqks1yae12w6t","slug":"4-prototype-__proto__-and-inheritance-in-javascript","title":"4. prototype, __proto__ and inheritance in JavaScript","type":"story","partOfPublication":true,"publication":"5e1da3e232d5fad159b6aa37","series":"5e1eff7a32d5fad159b6c499","__v":0,"dateUpdated":"2020-01-22T21:00:08.182Z","pendingPublicationApproval":false,"reactionsByCurrentUser":[],"totalReactions":0,"reactions":[],"similarPostIds":["5dbb1ab820c89dc564f8f56c","5d2879a5531dd9964db88124","5dc68d9811d453b858d9cb50","5db736517d5f5493565f23ca","57f36069750740a45d8164d8","5cf8f45a514aac6904345d41","5cf303bc994bbf330a1f83cf","572262c8086ff7f652b9ebd6","58a96b39c881b856ccbaa343","5d49e8d683ac19b965aa7957","57e9867828f98be5393f9f37","5b4c252dae0167e701c78ba4","5d02400736a0034c13ed018c","5cce8a03509707657c252279","59d54d138109ada408d1ee68","5dfa9dabacdafdac270db678","5d3f34adeba6a8835decc08a","5ce4595866930f0138affb03","5d94f48c2486a4cb58836b38","5e20840d7a1d3fcc5902bf00","5d73939ca1fa6bd331c418a3","5d973677f2d3c87a5b8c9ccb","5c09a54a2a14f97d37b71280","5d7bb81a8a9f85f13da90680","5db92f2ea2342e83540880c6","5aaf80ffaedacc0409dd00aa","5e28b74c32d5fad159b790ad","5d7dd00a10361dc656459059","5d3b59269bd1893f026db897","5df82461066598ab2752bd86"],"bookmarkedIn":[],"hasReward":false,"numCollapsed":0,"duplicatePosts":[],"isDelisted":false,"inviters":[],"answeredByTarget":false,"contributors":[],"isEngaging":false,"isFeatured":false,"isActive":true,"followers":[],"replyCount":0,"responseCount":0,"questionReplies":[],"responses":[],"popularity":3791.8282,"downvotedBy":[],"upvotedBy":[],"dateAdded":"2020-01-21T21:51:10.635Z","untaggedFrom":[],"tags":["56744721958ef13879b94cad","56744720958ef13879b947db"],"downvotes":0,"upvotes":0,"totalPollVotes":0,"reward":{"type":"xlm"},"pollOptions":[],"hasPolls":false,"contentMarkdown":"In the  [last post](https://diganta.hashnode.dev/3-about-js-objects-ck5o6dqbb05czqks1tmq6wkl9) we mentioned a behavior of objects created when the `new` keyword is used on a constructor function, i.e. JavaScript adds a property called as `__proto__` which points to the `prototype` property of the constructor function. \n\n**Note:** Before EcmaScript 2015 or ES6 there was no official way to access an object's internal `prototype` property. The formation of links for the purpose of inheritance was done using an internal property called `[[prototype]]`. It is modern browsers and JavaScript engines who provide the `__proto__` property to enable pointing to the constructor function's `prototype` object.\n\nNow let's see some code that reveals what happens under the hood. Let's define a constructor function(or also called as function constructor) and see whether really it has a property called `prototype`\n\n```\nfunction MyPseudoClass(){\n    this.myProperty = \"Hello World!\"\n}\nconsole.log(MyPseudoClass.prototype);//Output MyPseudoClass {}\n``` \nYes it does and its an object. Now let's create a new object using this function constructor and check its `__proto__` property.\n\n```\nvar myPseudoClassObject = new MyPseudoClass();\nconsole.log(myPseudoClassObject.myProperty);//Output \"Hello World!\"\nconsole.log(myPseudoClassObject.__proto__);//Output MyPseudoClass {}\n``` \nYes `__proto__` and it also points to an object.\nAre `MyPseudoClass.prototype` and `myPseudoClassObject.__proto__`  pointing to the same object? We can easily check this using the below equality comparison because *in JavaScript equality comparison of objects actually checks where these properties are pointing to in the memory*.\n\n```\nconsole.log(MyPseudoClass.prototype===myPseudoClassObject.__proto__);//true\n``` \nYes they are the same! \n\n![constructor_function_object_relation_diagram.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1579634490920/s9QcF6Fbl.png)\nNow does the newly created object have a prototype property by any chance?\n\n```\nconsole.log(myPseudoClassObject.prototype);//undefined\n``` \nNo it does not! As per JavaScript its **not a constructor function** and so it does not have its own prototype. Can we add one explicitly?\n\n```\nmyPseudoClassObject.prototype = {\n\t\"language\": \"javascript\"\n};\nconsole.log(myPseudoClassObject.prototype);//{ language: 'javascript' }\n``` \nYes we can and it remains as a property of `myPseudoClassObject` only.\n\nIn a  [previous](https://diganta.hashnode.dev/2-ecmascript-overview-ck5fqhk1g02n5qps1dq0o72yv) post I mentioned about another built-in object, the `Function` object, which acts as the parent of any constructor function we create. So based on what we have learnt about the `prototype` and `__proto__` relation, the `__proto__` of any **constructor function** should be pointing to the `prototype` property of the built-in `Function` object. Let's check if this is true:\n\n```\nconsole.log(MyPseudoClass.__proto__=== Function.prototype);//true\nconsole.log(MyPseudoClass.__proto__);//[Function]\n``` \nYes it does! Now that we are aware of the relation of `prototype` and `__proto__` objects let us see what the internal structure of the `prototype` object.\n\n**The prototype object**\n\nThe `prototype` object contains 2 properties of interest for us right now:\n\n1.  `constructor`\n2.  `__proto__`\n\nThe `constructor` is nothing but a reference to the very object to which this `prototype` belongs.\nAnd the `__proto__` points to either any other constructor function's `prototye` or to the `prototype` of the built-in `Object` constructor function.\n\nSo it can be better visualized as below:\n\n![prototype_proto_linksge.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1579642454942/pNAmalj-W.png)\n\nAnd this is what gives rise to the concept of **prototype-based inheritance** when we start linking one constructor function's `__proto__` object to the `prototype` of another constructor function.\n\nWe shall explore the inheritance mechanism of JavaScript in the  [next ](https://diganta.hashnode.dev/5-prototype-based-inheritance-in-javascript-ck5psgyjw06bdqps1wl6rsdnf) post.\n\nReferences:\n\n [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\n [https://hackernoon.com/understand-nodejs-javascript-object-inheritance-proto-prototype-class-9bd951700b29](https://hackernoon.com/understand-nodejs-javascript-object-inheritance-proto-prototype-class-9bd951700b29)  \n\n [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes) \n\n\n","content":"<p>In the  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/3-about-js-objects-ck5o6dqbb05czqks1tmq6wkl9\">last post</a> we mentioned a behavior of objects created when the <code>new</code> keyword is used on a constructor function, i.e. JavaScript adds a property called as <code>__proto__</code> which points to the <code>prototype</code> property of the constructor function. </p>\n<p><strong>Note:</strong> Before EcmaScript 2015 or ES6 there was no official way to access an object&#39;s internal <code>prototype</code> property. The formation of links for the purpose of inheritance was done using an internal property called <code>[[prototype]]</code>. It is modern browsers and JavaScript engines who provide the <code>__proto__</code> property to enable pointing to the constructor function&#39;s <code>prototype</code> object.</p>\n<p>Now let&#39;s see some code that reveals what happens under the hood. Let&#39;s define a constructor function(or also called as function constructor) and see whether really it has a property called <code>prototype</code></p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoClass</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.myProperty = <span class=\"hljs-string\">\"Hello World!\"</span>\n}\n<span class=\"hljs-built_in\">console</span>.log(MyPseudoClass.prototype);<span class=\"hljs-comment\">//Output MyPseudoClass {}</span>\n</code></pre><p>Yes it does and its an object. Now let&#39;s create a new object using this function constructor and check its <code>__proto__</code> property.</p>\n<pre><code><span class=\"hljs-keyword\">var</span> myPseudoClassObject = <span class=\"hljs-keyword\">new</span> MyPseudoClass();\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject.myProperty);<span class=\"hljs-comment\">//Output \"Hello World!\"</span>\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject.__proto__);<span class=\"hljs-comment\">//Output MyPseudoClass {}</span>\n</code></pre><p>Yes <code>__proto__</code> and it also points to an object.\nAre <code>MyPseudoClass.prototype</code> and <code>myPseudoClassObject.__proto__</code>  pointing to the same object? We can easily check this using the below equality comparison because <em>in JavaScript equality comparison of objects actually checks where these properties are pointing to in the memory</em>.</p>\n<pre><code><span class=\"hljs-built_in\">console</span>.log(MyPseudoClass.prototype===myPseudoClassObject.__proto__);<span class=\"hljs-comment\">//true</span>\n</code></pre><p>Yes they are the same! </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1579634490920/s9QcF6Fbl.png\" alt=\"constructor_function_object_relation_diagram.PNG\">\nNow does the newly created object have a prototype property by any chance?</p>\n<pre><code><span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject.prototype);<span class=\"hljs-comment\">//undefined</span>\n</code></pre><p>No it does not! As per JavaScript its <strong>not a constructor function</strong> and so it does not have its own prototype. Can we add one explicitly?</p>\n<pre><code>myPseudoClassObject.<span class=\"hljs-keyword\">prototype</span> = {\n    <span class=\"hljs-string\">\"language\"</span>: <span class=\"hljs-string\">\"javascript\"</span>\n};\nconsole.<span class=\"hljs-keyword\">log</span>(myPseudoClassObject.<span class=\"hljs-keyword\">prototype</span>);<span class=\"hljs-regexp\">//</span>{ language: <span class=\"hljs-string\">'javascript'</span> }\n</code></pre><p>Yes we can and it remains as a property of <code>myPseudoClassObject</code> only.</p>\n<p>In a  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/2-ecmascript-overview-ck5fqhk1g02n5qps1dq0o72yv\">previous</a> post I mentioned about another built-in object, the <code>Function</code> object, which acts as the parent of any constructor function we create. So based on what we have learnt about the <code>prototype</code> and <code>__proto__</code> relation, the <code>__proto__</code> of any <strong>constructor function</strong> should be pointing to the <code>prototype</code> property of the built-in <code>Function</code> object. Let&#39;s check if this is true:</p>\n<pre><code><span class=\"hljs-built_in\">console</span>.log(MyPseudoClass.__proto__=== <span class=\"hljs-built_in\">Function</span>.prototype);<span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-built_in\">console</span>.log(MyPseudoClass.__proto__);<span class=\"hljs-comment\">//[Function]</span>\n</code></pre><p>Yes it does! Now that we are aware of the relation of <code>prototype</code> and <code>__proto__</code> objects let us see what the internal structure of the <code>prototype</code> object.</p>\n<p><strong>The prototype object</strong></p>\n<p>The <code>prototype</code> object contains 2 properties of interest for us right now:</p>\n<ol>\n<li><code>constructor</code></li>\n<li><code>__proto__</code></li>\n</ol>\n<p>The <code>constructor</code> is nothing but a reference to the very object to which this <code>prototype</code> belongs.\nAnd the <code>__proto__</code> points to either any other constructor function&#39;s <code>prototye</code> or to the <code>prototype</code> of the built-in <code>Object</code> constructor function.</p>\n<p>So it can be better visualized as below:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1579642454942/pNAmalj-W.png\" alt=\"prototype_proto_linksge.PNG\"></p>\n<p>And this is what gives rise to the concept of <strong>prototype-based inheritance</strong> when we start linking one constructor function&#39;s <code>__proto__</code> object to the <code>prototype</code> of another constructor function.</p>\n<p>We shall explore the inheritance mechanism of JavaScript in the  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/5-prototype-based-inheritance-in-javascript-ck5psgyjw06bdqps1wl6rsdnf\">next </a> post.</p>\n<p>References:</p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor</a></p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"https://hackernoon.com/understand-nodejs-javascript-object-inheritance-proto-prototype-class-9bd951700b29\">https://hackernoon.com/understand-nodejs-javascript-object-inheritance-proto-prototype-class-9bd951700b29</a>  </p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes</a> </p>\n","brief":"In the  last post we mentioned a behavior of objects created when the new keyword is used on a constructor function, i.e. JavaScript adds a property called as __proto__ which points to the prototype property of the constructor function. \nNote: Before...","coverImage":"","views":45,"isAnonymous":false,"reactionToCountMapUnique":{"any":1},"uniqueReactions":[],"id":"5e27724e7a1d3fcc5903497d"},{"_id":"5e273a2c7a1d3fcc5903458e","hasPinnedTag":false,"draft":"5e2023c932d5fad159b6dba2","followersCount":1,"author":"5e1da2a87a1d3fcc59028458","title":"3. About JS Objects...","type":"story","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"5e1da3e232d5fad159b6aa37","slug":"3-about-js-objects","cuid":"ck5o6dqbb05czqks1tmq6wkl9","importedFromMedium":false,"hasCustomDate":false,"series":"5e1eff7a32d5fad159b6c499","__v":0,"dateUpdated":"2020-01-21T21:52:57.862Z","pendingPublicationApproval":false,"reactionsByCurrentUser":[],"totalReactions":0,"reactions":[],"similarPostIds":["5df68131066598ab2752b53d","5ce1be451295141c5de31b33","5cb60d715d6e9c583408a638","5ccbf55ebf131c7f3347b146","5d95af0688bd943a358f08f0","5c1274c3d4fe34436864d178","5e04d5f5704130b8432b2a47","5cc3fddf10de8ea34dbc043f","5a38f13e52a5369334dde045","5d49e8d683ac19b965aa7957","57e793cdef99cf03582fe42a","5cf699d8571ff6ae5c437ced","57cf2f4df85e4c1595b93b2e","5c59d26790b3031d13e93aa1","56fae3a3da7018d48c208e1c","5da1f0bdc749c77361675c1b","5d67ccac1a49d9f8113ccef0","5e25945632d5fad159b75922","5db4a254759edf547bf767bb","5dbeb90eaaa616c464d63189","5d7bb81a8a9f85f13da90680","5da10837c749c773616756d4","5d354465203d5eaa413cfa35","5da0eb9bac85846e61875138","5d73ca05c6e6b2327be8221a","5e29f7d67a1d3fcc5903844a","5dfa2a16066598ab2752cbd4","5d389db3b19a6e4f7202752f","5e0ef7db1a3128c630de4fe7","5cb5d9b52f4fb2020bbb565b"],"bookmarkedIn":[],"hasReward":false,"numCollapsed":0,"duplicatePosts":[],"isDelisted":false,"inviters":[],"answeredByTarget":false,"contributors":[],"isEngaging":false,"isFeatured":false,"isActive":true,"followers":[],"replyCount":0,"responseCount":0,"questionReplies":[],"responses":[],"popularity":3791.5089,"downvotedBy":[],"upvotedBy":[],"dateAdded":"2020-01-21T17:51:40.138Z","untaggedFrom":[],"tags":["56744721958ef13879b94cad","56744722958ef13879b9511f"],"downvotes":0,"upvotes":0,"totalPollVotes":0,"reward":{"type":"xlm"},"pollOptions":[],"hasPolls":false,"contentMarkdown":"As of ES5.1 *classes* did not exist similar to other programming languages like C++ or Java.\n\n**So how do we create objects?**\n- Via literals \n\n```\nvar obj = {};\nobj.myProperty = \"Hello literal object!\"\nconsole.log(obj.myProperty);\n``` \n- Via constructor functions\n\nIts simply a JavaScript function.\n```\nfunction MyPseudoClass(){\n    this.myProperty = \"Hello World!\"\n}\nvar myPseudoClassObject = new MyPseudoClass();\nconsole.log(myPseudoClassObject.myProperty);\n``` \nEach constructor function has a property named \"prototype\"(which JavaScript adds under the hood the moment the function is created) which is used to implement **prototype-based inheritance** and **shared properties**\n\nObjects are created using the **new ** keyword.  Omitting the new keyword has its consequences that depends on the constructor. For example ```Date()``` produces a date string and ```new Date()``` produces a date object.\n\nWhenever we create an object of a constructor function using the new keyword, JavaScript automatically adds a property named as ```__proto__``` to the object and this property points to the ```prototype``` property of the constructor function.\n\n\n![constructor_function_object_relation_diagram.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1579633613457/PA1sWJ6Jr.png)\n\nNow that we have defined what constructor functions are and how are new object created from them related to these constructor functions we can revisit object creation via literals and see actually it uses the function constructor way of object creation under the hood. How? Here's how...\n\nIf you remember in the  [previous ](https://diganta.hashnode.dev/2-ecmascript-overview-ck5fqhk1g02n5qps1dq0o72yv) post of this series we had mentioned some special built-in objects that JavaScript has, one of which was the `Object` object. So when JavaScript encounter the `{}` notation of creating objects, it internally calls the function constructor of the built-in `Object` function as `new Object()`. This creates a new instance of the `Object` function constructor and assigns its `__proto__` to `prototype` property of `Object` function constructor.\n\n\n\n- Via Object.create\n\nWe shall explore this method of object creation separately in later post and then compare with the previous two methods we have seen just now.\n\nIn the  [next section](https://diganta.hashnode.dev/4-prototype-__proto__-and-inheritance-in-javascript-ck5oexqoh05fwqks1yae12w6t)  we will explore ```prototypes ``` and ```__proto__``` in detail to understand its significance in the language.\n\nReferences:\n [https://www.ecma-international.org/ecma-262/5.1](https://www.ecma-international.org/ecma-262/5.1/) ","content":"<p>As of ES5.1 <em>classes</em> did not exist similar to other programming languages like C++ or Java.</p>\n<p><strong>So how do we create objects?</strong></p>\n<ul>\n<li>Via literals </li>\n</ul>\n<pre><code><span class=\"hljs-keyword\">var</span> obj = {};\nobj.myProperty = <span class=\"hljs-string\">\"Hello literal object!\"</span>\n<span class=\"hljs-built_in\">console</span>.log(obj.myProperty);\n</code></pre><ul>\n<li>Via constructor functions</li>\n</ul>\n<p>Its simply a JavaScript function.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPseudoClass</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.myProperty = <span class=\"hljs-string\">\"Hello World!\"</span>\n}\n<span class=\"hljs-keyword\">var</span> myPseudoClassObject = <span class=\"hljs-keyword\">new</span> MyPseudoClass();\n<span class=\"hljs-built_in\">console</span>.log(myPseudoClassObject.myProperty);\n</code></pre><p>Each constructor function has a property named &quot;prototype&quot;(which JavaScript adds under the hood the moment the function is created) which is used to implement <strong>prototype-based inheritance</strong> and <strong>shared properties</strong></p>\n<p>Objects are created using the <strong>new </strong> keyword.  Omitting the new keyword has its consequences that depends on the constructor. For example <code>Date()</code> produces a date string and <code>new Date()</code> produces a date object.</p>\n<p>Whenever we create an object of a constructor function using the new keyword, JavaScript automatically adds a property named as <code>__proto__</code> to the object and this property points to the <code>prototype</code> property of the constructor function.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1579633613457/PA1sWJ6Jr.png\" alt=\"constructor_function_object_relation_diagram.PNG\"></p>\n<p>Now that we have defined what constructor functions are and how are new object created from them related to these constructor functions we can revisit object creation via literals and see actually it uses the function constructor way of object creation under the hood. How? Here&#39;s how...</p>\n<p>If you remember in the  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/2-ecmascript-overview-ck5fqhk1g02n5qps1dq0o72yv\">previous </a> post of this series we had mentioned some special built-in objects that JavaScript has, one of which was the <code>Object</code> object. So when JavaScript encounter the <code>{}</code> notation of creating objects, it internally calls the function constructor of the built-in <code>Object</code> function as <code>new Object()</code>. This creates a new instance of the <code>Object</code> function constructor and assigns its <code>__proto__</code> to <code>prototype</code> property of <code>Object</code> function constructor.</p>\n<ul>\n<li>Via Object.create</li>\n</ul>\n<p>We shall explore this method of object creation separately in later post and then compare with the previous two methods we have seen just now.</p>\n<p>In the  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/4-prototype-__proto__-and-inheritance-in-javascript-ck5oexqoh05fwqks1yae12w6t\">next section</a>  we will explore <code>prototypes</code> and <code>__proto__</code> in detail to understand its significance in the language.</p>\n<p>References:\n <a target='_blank' rel='noopener noreferrer'  href=\"https://www.ecma-international.org/ecma-262/5.1/\">https://www.ecma-international.org/ecma-262/5.1</a> </p>\n","brief":"As of ES5.1 classes did not exist similar to other programming languages like C++ or Java.\nSo how do we create objects?\n\nVia literals \n\nvar obj = {};\nobj.myProperty = \"Hello literal object!\"\nconsole.log(obj.myProperty);\n\nVia constructor functions\n\nIt...","coverImage":"","views":36,"isAnonymous":false,"reactionToCountMapUnique":{"any":1},"uniqueReactions":[],"id":"5e273a2c7a1d3fcc5903458e"},{"_id":"5e1f705332d5fad159b6cc68","hasPinnedTag":false,"isRepublished":false,"draft":"5e1f59357a1d3fcc5902a446","followersCount":1,"author":"5e1da2a87a1d3fcc59028458","cuid":"ck5fqhk1g02n5qps1dq0o72yv","slug":"2-ecmascript-overview","title":"2. ECMAScript Overview","type":"story","partOfPublication":true,"publication":"5e1da3e232d5fad159b6aa37","series":"5e1eff7a32d5fad159b6c499","__v":0,"dateUpdated":"2020-01-21T17:53:29.618Z","pendingPublicationApproval":false,"reactionsByCurrentUser":[],"totalReactions":0,"reactions":[],"similarPostIds":["5815ebaa7f6eb9ba32d23c6f","5e06315b84a7ded378c9b86e","5c4aea23f55af4aa56f28b27","5df68131066598ab2752b53d","5cb2aaf804f60f0c06c7f611","5cce4a4583d8d2592ca24adb","5cdb899848e72ad57d4fc7b6","591be31b766ef3ce74df8ada","5cc70fcc7d98cc4a3fb33fda","5d0771e547ee4a9831ea8108","572262c8086ff7f652b9ebd6","5d3b5b3f1aed873e424a924c","5a210acceaaba91a74c1ec5b","5b61c42d266c9a352f647c7f","57e793cdef99cf03582fe42a","5870d9c84bd824eaa1272afa","59d7ab842c29beea252be49d","5dfa9dabacdafdac270db678","5dda5d856c0aefa8683deb30","5c3c37d8bdb6d3fc3a20b8cf","5dba5436776cc77856f58e6b","5d94f48c2486a4cb58836b38","5cd588e7bd13366b54cb8990","5d973677f2d3c87a5b8c9ccb","5dee27229d1e156f48e3303e","5d67ccac1a49d9f8113ccef0","5dbeb90eaaa616c464d63189","5d66fc2afea5494e04016b69","5d885e583ca4bb28089c1ad2","5d3b59269bd1893f026db897"],"bookmarkedIn":[],"hasReward":false,"numCollapsed":0,"duplicatePosts":[],"isDelisted":false,"inviters":[],"answeredByTarget":false,"contributors":[],"isEngaging":false,"isFeatured":false,"isActive":true,"followers":[],"replyCount":0,"responseCount":0,"questionReplies":[],"responses":[],"popularity":3780.1661,"downvotedBy":[],"upvotedBy":[],"dateAdded":"2020-01-15T20:04:35.371Z","untaggedFrom":[],"tags":["56744721958ef13879b94cad","56744722958ef13879b9511f"],"downvotes":0,"upvotes":0,"totalPollVotes":0,"reward":{"type":"xlm"},"pollOptions":[],"hasPolls":false,"contentMarkdown":"## What is was originally?\nOriginally ECMAScript was developed to be a Web Scripting Language which would be used to make a web page more lively by manupulating, customizing and automating the functionalities of the existing system in which it runs. \n\n## And as of today...\nECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment.\n\nIn the core of a Web browser is a browser engine and an ECMAScript engine(mostly JavaScript engine) which provides the host environment for execution of the JavaScript code.\n\nFor example the Google Chrome browser uses the  [Blink](https://www.chromium.org/blink)  rendering engine and the  [V8 ](https://v8.dev/)  JavaScript engine.\n\nBy using JavaScript at the client side the client-server architecture has evolved greatly as the computation power could now be distributed on both client and server.\n\n## A brief of data-types used in JavaScript(JS)\nThe various data-types used in JS can be categorized as follows\n- **The Primitives**: ```Undefined```, ```Null```, ```Boolean```, ```Number```, ```String```\n- **Objects**: A collection of properties where each *property* has *attributes* that define how the property can be used. These properties can hold primitive values, other objects or functions.\n- **Functions**: JS functions are also objects. They differ from other objects that contain data because functions are **callable** object, meaning they can be executed or called from other parts of the program.\n- **Method**: It is nothing but a name given to functions that are present as a property of an object.\n\n## Special built-in objects\nThere are some special objects that include the **global** object, the **Object** object, the **Function** object, the **Array** object, **String** object, **Boolean** object, **Number** object, **Math** object, **Date** object, **RegExp** object, **JSON** object and some error objects like **Error**, **EvalError**, **ReferenceError**, **TypeError**, **RangeError**, **SyntaxError** and **URIError**\n\n## Operators: \nJS includes operators like Unary, Binary, Ternary, Additive, Multiplicative, Bitwise, Relational, Equality, Bitwise Shift, Binary Bitwise, Binary Logical, Assignment and Comma operators.\n\nA few other interesting JS features are which we will experience in detail later on are:\n\n- Its syntax is intentionally made similar to Java for ease of use\n\n-  It is loosely typed language which mean we need not declare the type of a variable during its declaration.\n- A function can be called before its declaration appears textually.\n   \n```\na();\n\nfunction a(){\n\tconsole.log(\"Seems to be declared after its called\");\n}\n``` \n**This works in JS world!!! We will see in detail later why this works.**\n\nThis was a little bit of overview of JavaScript. In the next post we shall dive into detailed features of the language. Let's start with  [Objects](https://diganta.hashnode.dev/3-about-js-objects-ck5o6dqbb05czqks1tmq6wkl9) \n\n\nReferences:\n\n [https://www.ecma-international.org/ecma-262/5.1](https://www.ecma-international.org/ecma-262/5.1) \n\n [https://en.wikipedia.org/wiki/Browser_engine](https://en.wikipedia.org/wiki/Browser_engine)\n\n \n\n","content":"<h2 id=\"what-is-was-originally-\">What is was originally?</h2>\n<p>Originally ECMAScript was developed to be a Web Scripting Language which would be used to make a web page more lively by manupulating, customizing and automating the functionalities of the existing system in which it runs. </p>\n<h2 id=\"and-as-of-today-\">And as of today...</h2>\n<p>ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment.</p>\n<p>In the core of a Web browser is a browser engine and an ECMAScript engine(mostly JavaScript engine) which provides the host environment for execution of the JavaScript code.</p>\n<p>For example the Google Chrome browser uses the  <a target='_blank' rel='noopener noreferrer'  href=\"https://www.chromium.org/blink\">Blink</a>  rendering engine and the  <a target='_blank' rel='noopener noreferrer'  href=\"https://v8.dev/\">V8 </a>  JavaScript engine.</p>\n<p>By using JavaScript at the client side the client-server architecture has evolved greatly as the computation power could now be distributed on both client and server.</p>\n<h2 id=\"a-brief-of-data-types-used-in-javascript-js-\">A brief of data-types used in JavaScript(JS)</h2>\n<p>The various data-types used in JS can be categorized as follows</p>\n<ul>\n<li><strong>The Primitives</strong>: <code>Undefined</code>, <code>Null</code>, <code>Boolean</code>, <code>Number</code>, <code>String</code></li>\n<li><strong>Objects</strong>: A collection of properties where each <em>property</em> has <em>attributes</em> that define how the property can be used. These properties can hold primitive values, other objects or functions.</li>\n<li><strong>Functions</strong>: JS functions are also objects. They differ from other objects that contain data because functions are <strong>callable</strong> object, meaning they can be executed or called from other parts of the program.</li>\n<li><strong>Method</strong>: It is nothing but a name given to functions that are present as a property of an object.</li>\n</ul>\n<h2 id=\"special-built-in-objects\">Special built-in objects</h2>\n<p>There are some special objects that include the <strong>global</strong> object, the <strong>Object</strong> object, the <strong>Function</strong> object, the <strong>Array</strong> object, <strong>String</strong> object, <strong>Boolean</strong> object, <strong>Number</strong> object, <strong>Math</strong> object, <strong>Date</strong> object, <strong>RegExp</strong> object, <strong>JSON</strong> object and some error objects like <strong>Error</strong>, <strong>EvalError</strong>, <strong>ReferenceError</strong>, <strong>TypeError</strong>, <strong>RangeError</strong>, <strong>SyntaxError</strong> and <strong>URIError</strong></p>\n<h2 id=\"operators-\">Operators:</h2>\n<p>JS includes operators like Unary, Binary, Ternary, Additive, Multiplicative, Bitwise, Relational, Equality, Bitwise Shift, Binary Bitwise, Binary Logical, Assignment and Comma operators.</p>\n<p>A few other interesting JS features are which we will experience in detail later on are:</p>\n<ul>\n<li><p>Its syntax is intentionally made similar to Java for ease of use</p>\n</li>\n<li><p>It is loosely typed language which mean we need not declare the type of a variable during its declaration.</p>\n</li>\n<li>A function can be called before its declaration appears textually.</li>\n</ul>\n<pre><code>a();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Seems to be declared after its called\"</span>);\n}\n</code></pre><p><strong>This works in JS world!!! We will see in detail later why this works.</strong></p>\n<p>This was a little bit of overview of JavaScript. In the next post we shall dive into detailed features of the language. Let&#39;s start with  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/3-about-js-objects-ck5o6dqbb05czqks1tmq6wkl9\">Objects</a> </p>\n<p>References:</p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"https://www.ecma-international.org/ecma-262/5.1\">https://www.ecma-international.org/ecma-262/5.1</a> </p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"https://en.wikipedia.org/wiki/Browser_engine\">https://en.wikipedia.org/wiki/Browser_engine</a></p>\n","brief":"What is was originally?\nOriginally ECMAScript was developed to be a Web Scripting Language which would be used to make a web page more lively by manupulating, customizing and automating the functionalities of the existing system in which it runs. \nAn...","coverImage":"","views":43,"isAnonymous":false,"reactionToCountMapUnique":{"any":1},"uniqueReactions":[],"id":"5e1f705332d5fad159b6cc68"},{"_id":"5e1f455f32d5fad159b6ca9f","hasPinnedTag":false,"draft":"5e1f001632d5fad159b6c49a","followersCount":1,"author":"5e1da2a87a1d3fcc59028458","title":"1. The big bang moment...","type":"story","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"5e1da3e232d5fad159b6aa37","slug":"1-the-big-bang-moment","cuid":"ck5fjxvdi02jqqps1jm9rodi7","importedFromMedium":false,"hasCustomDate":false,"series":"5e1eff7a32d5fad159b6c499","__v":0,"dateUpdated":"2020-01-15T20:09:05.089Z","pendingPublicationApproval":false,"reactionsByCurrentUser":[],"totalReactions":0,"reactions":[],"similarPostIds":["5c24c4cfeb5d7bfc50e1cd21","56c570b5655754661546278f","5c396e41b63f9136626fe7c8","5d3c63184d97b7262a1d9887","5d3acfb769f990ed576e139a","5d545ab1cba2be0e31bd362e","578e2cca23e94ba91a5beae0","5d7cb1785fe39bb30b4ebff0","5ca4c8c0e9fed3e35dd17f83","59a315b927d7fc514f9438f8","5bf5a59e3dfb4bea6e4703bb","5cd18de080dec0b449f1aac1","5919bad271a537240f37df23","5d5f95dbf1ff49f753bf6321","5d7e9e05f31117b041ec64e4","5dcd07969743769d2cfb5686","5cf7869fd156cfe57efb85f7","5db6c1ed72775b8e5645c3ab","5d934aac2a9600596e16d5fc","5b28cac7a55b15344033e659","5dc03a500577b894689100e8","5d2c86760155bc657e9a3c64","5d5bd9beeae1cd954aeb686d","5d1b456e0d1000c42fe1b4ec","5dc915fc11d453b858d9d6d2","5cee46f4fac35089493d7f4c","5e03bdb640047bb24327bebf","5d5cb83f1fd19079794650f1","5dc075c60577b894689103e4","594a9dd141be68dc88218c13"],"bookmarkedIn":[],"hasReward":false,"numCollapsed":0,"duplicatePosts":[],"isDelisted":false,"inviters":[],"answeredByTarget":false,"contributors":[],"isEngaging":false,"isFeatured":false,"isActive":true,"followers":[],"replyCount":0,"responseCount":0,"questionReplies":[],"responses":[],"popularity":3779.9218,"downvotedBy":[],"upvotedBy":[],"dateAdded":"2020-01-15T17:01:19.246Z","untaggedFrom":[],"tags":["56744722958ef13879b9511f","56744720958ef13879b947db","56744721958ef13879b94cad"],"downvotes":0,"upvotes":0,"totalPollVotes":0,"reward":{"type":"xlm"},"pollOptions":[],"hasPolls":false,"contentMarkdown":"> \"... it all started with a big bang\"\n# Why ECMAScript was conceived?\n\nPrior to 1997 a scripting language was developed to enable some client side scripts to be executed in the browser Netscape Navigator 2.0 in September 1995 known as  [LiveScript](https://en.wikipedia.org/wiki/LiveScript), which was later renamed as  [JavaScript](https://en.wikipedia.org/wiki/JavaScript) when the browser was deployed in December. At the same time Microsoft was developing JScript.\nThis lead to a lot of non standardized ways in which browser scripting was being done.\nLong story short.. a lot of major players jumped in with different implementations of a script for browsers and hence the need for standardization was felt and then in November 1996 Netscape submitted JavaScript to   [ECMA International](https://en.wikipedia.org/wiki/Ecma_International) based on which other browsers could implement their JS Engine.\n\nSo the \nECMAScript : *\"A general purpose, cross-platform programming language\"* came into being.\n\n### The First Edition - June 1997\nThe standardization and first edition of ECMAScript was available.\n\n### The Second Edition - June 1998\nThe second edition of the script was made available also known as ECMA-262 which was basically an edited version of the first edition.\n\n### The Third Edition - December 1999\nThe third edition was made available, and this time it came with some features that started shaping this scripting language. Some of the features were:\n- Powerful regular expressions\n- Better string handling\n- New control statements\n- Try/Catch Exception Handling mechanism\n- More precise definitions of errors\n- Numeric formatting capabilities\n\n\n### No Fourth Edition !!! \nAfter the third edition was made available the world started to adapt to the ECMA standards and started implementing in the web browsers. A lot of work was done to develop a fourth edition, however the work was not completed and as a result the fourth edition was never published. However some of the features were used for developing the sixth edition.\n\n### The Fifth Edition(5.1) or ES5 - June 2011\nThis added some interesting features:\n- Accessor properties\n- Reflective Creation\n- Inspection of Objects\n- Program Control of Property Attributes\n- Additional array manipulation functions\n- Support for JSON object encoding format\n- *strict mode* that provides enhanced error check and security\n\n### The Sixth Edition or ES6 or ECMAScript 2015 - June 2015\nA lot of new features were added in this Edition:\n- Constants\n- Blocked scope variables and functions\n- Arrow Functions\n- Extended Parameter handling\n- Template Literals\n- Enhanced Regular Expressions\n- Enhanced Object Properties\n- Destructuring Assignment\n- Modules\n- Classes\n- Symbol Types\n- Iterators\n- Generators\n- Map/Set or WeakMap/WeakSet\n- Typed Arrays\n- New Built-In Methods\n- Promises\n- Meta-Programming\n- Internationalization and Localization\n\n### The Seventh Edition or ES7 or ECMAScript 2016 - June 2016\n- Proper Tail Calls\n- Exponentiation operators ```**```\n- ```await``` , ```async``` for asynchronous programming\n \n\n### The Eighth Edition or ES8 or ECMAScript 2017 - June 2017\n- Includes features for concurrency and  [atomics](https://en.wikipedia.org/wiki/Linearizability) \n- Syntactic Integration with promises(async/await)\n- Shared Memory\n\n### The Ninth Edition or ES9 or ECMAScript 2018 - June 2018\n- Rest/spread operators for variables(three dots: ```...identifier```)\n- Asynchronous Iteration\n- ```Promise.prototype.finally()```\n- Additions to Regular Expressions\n\n### The Tenth Edition or ES10 or ECMAScript 2019 - June 2019\nSome of the new features are:\n- ```Array.prototype.flat```\n- ```Array.prototype.flatMap```\n- ```Array.sort```\n- ```Object.fromEntries```\n- ```trimStart``` and ```trimEnd``` on ```String.prototype```\n- allowing U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) in string literals to align with JSON\n- ```Function.prototype.toString```\n\nAs is evident from this evolution and additions to the ECMAScript standards, this is no more a mere Scripting Language but a full scale programming language.\n\nAnd not only is JavaScript(the most popular and widely used implementation of ECMAScript specifications) used for client side scripting with client side frameworks like  [AngularJS](https://angularjs.org/) ,  [VueJS](https://vuejs.org/) ,  [ReactJS](https://reactjs.org/) and many more in the World Wide Web, but it is also a very popular choice for Service Side scripting, thanks to  [NodeJS](https://nodejs.org/) !\n\nSo this is how it all began !!! Let us go through  a  [basic overview of ECMAScript/JS](https://diganta.hashnode.dev/2-ecmascript-overview-ck5fqhk1g02n5qps1dq0o72yv) \n \n\n\n\nReferences:\n[https://en.wikipedia.org/wiki/ECMAScript](https://en.wikipedia.org/wiki/ECMAScript) \n\n [https://www.ecma-international.org/ecma-262/5.1/](https://www.ecma-international.org/ecma-262/5.1/)\n\n [http://www.ecma-international.org/ecma-262/6.0/](http://www.ecma-international.org/ecma-262/6.0/)  \n\n [http://www.ecma-international.org/ecma-262/7.0/](http://www.ecma-international.org/ecma-262/7.0/) \n\n [http://www.ecma-international.org/ecma-262/8.0/index.html](http://www.ecma-international.org/ecma-262/8.0/index.html) \n\n [http://www.ecma-international.org/ecma-262/9.0/](http://www.ecma-international.org/ecma-262/9.0/) \n\n [http://www.ecma-international.org/ecma-262/10.0/](http://www.ecma-international.org/ecma-262/10.0/) \n\n[http://es6-features.org/#Constants](http://es6-features.org/#Constants) ","content":"<blockquote>\n<p>&quot;... it all started with a big bang&quot;</p>\n<h1 id=\"why-ecmascript-was-conceived-\">Why ECMAScript was conceived?</h1>\n</blockquote>\n<p>Prior to 1997 a scripting language was developed to enable some client side scripts to be executed in the browser Netscape Navigator 2.0 in September 1995 known as  <a target='_blank' rel='noopener noreferrer'  href=\"https://en.wikipedia.org/wiki/LiveScript\">LiveScript</a>, which was later renamed as  <a target='_blank' rel='noopener noreferrer'  href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> when the browser was deployed in December. At the same time Microsoft was developing JScript.\nThis lead to a lot of non standardized ways in which browser scripting was being done.\nLong story short.. a lot of major players jumped in with different implementations of a script for browsers and hence the need for standardization was felt and then in November 1996 Netscape submitted JavaScript to   <a target='_blank' rel='noopener noreferrer'  href=\"https://en.wikipedia.org/wiki/Ecma_International\">ECMA International</a> based on which other browsers could implement their JS Engine.</p>\n<p>So the \nECMAScript : <em>&quot;A general purpose, cross-platform programming language&quot;</em> came into being.</p>\n<h3 id=\"the-first-edition-june-1997\">The First Edition - June 1997</h3>\n<p>The standardization and first edition of ECMAScript was available.</p>\n<h3 id=\"the-second-edition-june-1998\">The Second Edition - June 1998</h3>\n<p>The second edition of the script was made available also known as ECMA-262 which was basically an edited version of the first edition.</p>\n<h3 id=\"the-third-edition-december-1999\">The Third Edition - December 1999</h3>\n<p>The third edition was made available, and this time it came with some features that started shaping this scripting language. Some of the features were:</p>\n<ul>\n<li>Powerful regular expressions</li>\n<li>Better string handling</li>\n<li>New control statements</li>\n<li>Try/Catch Exception Handling mechanism</li>\n<li>More precise definitions of errors</li>\n<li>Numeric formatting capabilities</li>\n</ul>\n<h3 id=\"no-fourth-edition-\">No Fourth Edition !!!</h3>\n<p>After the third edition was made available the world started to adapt to the ECMA standards and started implementing in the web browsers. A lot of work was done to develop a fourth edition, however the work was not completed and as a result the fourth edition was never published. However some of the features were used for developing the sixth edition.</p>\n<h3 id=\"the-fifth-edition-5-1-or-es5-june-2011\">The Fifth Edition(5.1) or ES5 - June 2011</h3>\n<p>This added some interesting features:</p>\n<ul>\n<li>Accessor properties</li>\n<li>Reflective Creation</li>\n<li>Inspection of Objects</li>\n<li>Program Control of Property Attributes</li>\n<li>Additional array manipulation functions</li>\n<li>Support for JSON object encoding format</li>\n<li><em>strict mode</em> that provides enhanced error check and security</li>\n</ul>\n<h3 id=\"the-sixth-edition-or-es6-or-ecmascript-2015-june-2015\">The Sixth Edition or ES6 or ECMAScript 2015 - June 2015</h3>\n<p>A lot of new features were added in this Edition:</p>\n<ul>\n<li>Constants</li>\n<li>Blocked scope variables and functions</li>\n<li>Arrow Functions</li>\n<li>Extended Parameter handling</li>\n<li>Template Literals</li>\n<li>Enhanced Regular Expressions</li>\n<li>Enhanced Object Properties</li>\n<li>Destructuring Assignment</li>\n<li>Modules</li>\n<li>Classes</li>\n<li>Symbol Types</li>\n<li>Iterators</li>\n<li>Generators</li>\n<li>Map/Set or WeakMap/WeakSet</li>\n<li>Typed Arrays</li>\n<li>New Built-In Methods</li>\n<li>Promises</li>\n<li>Meta-Programming</li>\n<li>Internationalization and Localization</li>\n</ul>\n<h3 id=\"the-seventh-edition-or-es7-or-ecmascript-2016-june-2016\">The Seventh Edition or ES7 or ECMAScript 2016 - June 2016</h3>\n<ul>\n<li>Proper Tail Calls</li>\n<li>Exponentiation operators <code>**</code></li>\n<li><code>await</code> , <code>async</code> for asynchronous programming</li>\n</ul>\n<h3 id=\"the-eighth-edition-or-es8-or-ecmascript-2017-june-2017\">The Eighth Edition or ES8 or ECMAScript 2017 - June 2017</h3>\n<ul>\n<li>Includes features for concurrency and  <a target='_blank' rel='noopener noreferrer'  href=\"https://en.wikipedia.org/wiki/Linearizability\">atomics</a> </li>\n<li>Syntactic Integration with promises(async/await)</li>\n<li>Shared Memory</li>\n</ul>\n<h3 id=\"the-ninth-edition-or-es9-or-ecmascript-2018-june-2018\">The Ninth Edition or ES9 or ECMAScript 2018 - June 2018</h3>\n<ul>\n<li>Rest/spread operators for variables(three dots: <code>...identifier</code>)</li>\n<li>Asynchronous Iteration</li>\n<li><code>Promise.prototype.finally()</code></li>\n<li>Additions to Regular Expressions</li>\n</ul>\n<h3 id=\"the-tenth-edition-or-es10-or-ecmascript-2019-june-2019\">The Tenth Edition or ES10 or ECMAScript 2019 - June 2019</h3>\n<p>Some of the new features are:</p>\n<ul>\n<li><code>Array.prototype.flat</code></li>\n<li><code>Array.prototype.flatMap</code></li>\n<li><code>Array.sort</code></li>\n<li><code>Object.fromEntries</code></li>\n<li><code>trimStart</code> and <code>trimEnd</code> on <code>String.prototype</code></li>\n<li>allowing U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) in string literals to align with JSON</li>\n<li><code>Function.prototype.toString</code></li>\n</ul>\n<p>As is evident from this evolution and additions to the ECMAScript standards, this is no more a mere Scripting Language but a full scale programming language.</p>\n<p>And not only is JavaScript(the most popular and widely used implementation of ECMAScript specifications) used for client side scripting with client side frameworks like  <a target='_blank' rel='noopener noreferrer'  href=\"https://angularjs.org/\">AngularJS</a> ,  <a target='_blank' rel='noopener noreferrer'  href=\"https://vuejs.org/\">VueJS</a> ,  <a target='_blank' rel='noopener noreferrer'  href=\"https://reactjs.org/\">ReactJS</a> and many more in the World Wide Web, but it is also a very popular choice for Service Side scripting, thanks to  <a target='_blank' rel='noopener noreferrer'  href=\"https://nodejs.org/\">NodeJS</a> !</p>\n<p>So this is how it all began !!! Let us go through  a  <a target='_blank' rel='noopener noreferrer'  href=\"https://diganta.hashnode.dev/2-ecmascript-overview-ck5fqhk1g02n5qps1dq0o72yv\">basic overview of ECMAScript/JS</a> </p>\n<p>References:\n<a target='_blank' rel='noopener noreferrer'  href=\"https://en.wikipedia.org/wiki/ECMAScript\">https://en.wikipedia.org/wiki/ECMAScript</a> </p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"https://www.ecma-international.org/ecma-262/5.1/\">https://www.ecma-international.org/ecma-262/5.1/</a></p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"http://www.ecma-international.org/ecma-262/6.0/\">http://www.ecma-international.org/ecma-262/6.0/</a>  </p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"http://www.ecma-international.org/ecma-262/7.0/\">http://www.ecma-international.org/ecma-262/7.0/</a> </p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"http://www.ecma-international.org/ecma-262/8.0/index.html\">http://www.ecma-international.org/ecma-262/8.0/index.html</a> </p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"http://www.ecma-international.org/ecma-262/9.0/\">http://www.ecma-international.org/ecma-262/9.0/</a> </p>\n<p> <a target='_blank' rel='noopener noreferrer'  href=\"http://www.ecma-international.org/ecma-262/10.0/\">http://www.ecma-international.org/ecma-262/10.0/</a> </p>\n<p><a target='_blank' rel='noopener noreferrer'  href=\"http://es6-features.org/#Constants\">http://es6-features.org/#Constants</a> </p>\n","brief":"\"... it all started with a big bang\"\nWhy ECMAScript was conceived?\n\nPrior to 1997 a scripting language was developed to enable some client side scripts to be executed in the browser Netscape Navigator 2.0 in September 1995 known as  LiveScript, which...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1579106958492/kTGRZAObZ.jpeg","views":54,"isAnonymous":false,"reactionToCountMapUnique":{"any":1},"uniqueReactions":[],"id":"5e1f455f32d5fad159b6ca9f"}]}